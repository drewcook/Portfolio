//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Portfolio.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PortfolioEntities : DbContext
    {
        public PortfolioEntities()
            : base("name=PortfolioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Contact> Contacts { get; set; }
    
        public virtual ObjectResult<GetContactByID_Result> GetContactByID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContactByID_Result>("GetContactByID", contactIDParameter);
        }
    
        public virtual int InsertContact(string firstname, string lastname, string emailaddress, string contactnumber, string comment)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("emailaddress", emailaddress) :
                new ObjectParameter("emailaddress", typeof(string));
    
            var contactnumberParameter = contactnumber != null ?
                new ObjectParameter("contactnumber", contactnumber) :
                new ObjectParameter("contactnumber", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContact", firstnameParameter, lastnameParameter, emailaddressParameter, contactnumberParameter, commentParameter);
        }
    
        public virtual int UpdateContact(Nullable<int> contactID, string firstname, string lastname, string emailaddress, string contactnumber, string comment)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("emailaddress", emailaddress) :
                new ObjectParameter("emailaddress", typeof(string));
    
            var contactnumberParameter = contactnumber != null ?
                new ObjectParameter("contactnumber", contactnumber) :
                new ObjectParameter("contactnumber", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContact", contactIDParameter, firstnameParameter, lastnameParameter, emailaddressParameter, contactnumberParameter, commentParameter);
        }
    }
}
